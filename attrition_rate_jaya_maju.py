# -*- coding: utf-8 -*-
"""Attrition Rate Jaya Maju

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SCvXY-PeMT_OUObXT_lX0-WCHQBbm44M
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, accuracy_score
import joblib

"""**Data Understanding**"""

df = pd.read_csv('/content/employee_data.csv')

df.head()

df.info()

df.describe()

"""Menangani Missing Value"""

# Melakukan cek terhadap kolom mana saja yang memiliki value null
columns_with_nan = df.columns[df.isnull().any()].tolist()

# Membuat Dataframe untuk menampilkan kolom yang memliki nilai null
nan_info = pd.DataFrame({
    'Tipe Data': df[columns_with_nan].dtypes,
    'Jumlah Null': df[columns_with_nan].isnull().sum()
})

print("Kolom yang memiliki nilai Null beserta tipe datanya:")
print(nan_info)

# Menghapus kolom yang memiliki nilai null
df = df.dropna()

"""**Univariate Analysis**"""

# Identifikasi kolom numerical
numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

# Univariate analysis untuk numerical variables
plt.figure(figsize=(18, 20))
for i, col in enumerate(numerical_columns, 1):
    plt.subplot(len(numerical_columns) // 3 + 1, 3, i)
    sns.histplot(df[col], kde=True)
    plt.title(f'Distribution of {col}')
plt.tight_layout()
plt.show()

# Identifikasi kolom categorical
categorical_columns = df.select_dtypes(include=['object']).columns.tolist()

# Univariate analysis untuk categorical variables
plt.figure(figsize=(18, 20))
for i, col in enumerate(categorical_columns, 1):
    plt.subplot(len(categorical_columns) // 3 + 1, 3, i)
    sns.countplot(data=df, x=col)
    plt.title(f'Distribution of {col}')
    plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Menghapus kolom `EmployeeCount`, `StandardHours`, dan `Over18` karena hanya memiliki satu nilai
df = df.drop(['EmployeeCount', 'StandardHours', 'Over18'], axis=1)

"""**Multivariate Analysis**"""

# Identifikasi semua fitur kategorikal dalam dataset
categorical_features = df.select_dtypes(include=['object']).columns.tolist()

# Membuat plot untuk setiap fitur kategorikal relatif terhadap 'Attrition'
for col in categorical_features:
    sns.catplot(x=col, hue="Attrition", kind="count", dodge=False, height=4, aspect=3, data=df, palette="Set3")
    plt.title("Distribusi 'Attrition' Relatif terhadap - {}".format(col))
    plt.xticks(rotation=90)
    plt.show()

"""**Correlation Matrix**"""

# Identifikasi fitur numerik dan kategorikal
categorical_columns = df.select_dtypes(include=['object']).columns.tolist()
numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

# One-hot encoding untuk fitur kategorikal
df_encoded = pd.get_dummies(df, columns=categorical_columns, drop_first=True)

# Membuat matriks korelasi untuk seluruh fitur (numerik dan kategorikal yang telah dienkode)
correlation_matrix = df_encoded.corr()

# Plot matriks korelasi
plt.figure(figsize=(40, 25))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix of All Variables (Including Encoded Categorical Features)')
plt.show()

# Identifikasi fitur numerik dan kategorikal
categorical_columns = df.select_dtypes(include=['object']).columns.tolist()
numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

# One-hot encoding untuk fitur kategorikal
df_encoded = pd.get_dummies(df, columns=categorical_columns, drop_first=True)

# Membuat matriks korelasi untuk seluruh fitur (numerik dan kategorikal yang telah dienkode)
correlation_matrix = df_encoded.corr()

# Ambil korelasi dengan kolom 'Attrition'
attrition_correlation = correlation_matrix["Attrition"].sort_values(ascending=False)

factors = attrition_correlation
factors = factors.drop('Attrition')

print("Factors  correlated with Attrition:")
print(factors)

# Plot the top 10 correlations
plt.figure(figsize=(10, 8))
sns.barplot(x=factors.values, y=factors.index, hue=factors.index, dodge=False, palette="coolwarm", legend=False)
plt.title("Features Most Correlated with Attrition")
plt.xlabel("Correlation with Attrition")
plt.show()

# Identifikasi fitur numerik dan kategorikal
categorical_columns = df.select_dtypes(include=['object']).columns.tolist()
numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

# One-hot encoding untuk fitur kategorikal
df_encoded = pd.get_dummies(df, columns=categorical_columns, drop_first=True)

# Membuat matriks korelasi untuk seluruh fitur (numerik dan kategorikal yang telah dienkode)
correlation_matrix = df_encoded.corr()

# Ambil korelasi dengan kolom 'Attrition'
attrition_correlation = correlation_matrix["Attrition"].sort_values(ascending=False)

# Ambil 10 fitur dengan korelasi tertinggi terhadap 'Attrition'
top_10_factors = attrition_correlation.head(11)  # Include 'Attrition' itself as well
top_10_factors = top_10_factors.drop('Attrition')  # Remove 'Attrition' as we are interested in other factors

print("Top 10 factors most correlated with Attrition:")
print(top_10_factors)

# Plot the top 10 correlations
plt.figure(figsize=(10, 8))
sns.barplot(x=top_10_factors.values, y=top_10_factors.index, hue=top_10_factors.index, dodge=False, palette="coolwarm", legend=False)
plt.title("Top 10 Features Most Correlated with Attrition")
plt.xlabel("Correlation with Attrition")
plt.show()

"""**Data Preparation/Preprocessing**"""

df_cleaned = df.copy()
df_cleaned = df_cleaned.drop(['EmployeeId'], axis=1)

# Identifikasi fitur numerik dan kategorikal
categorical_columns = df_cleaned.select_dtypes(include=['object']).columns.tolist()
numerical_columns = df_cleaned.select_dtypes(include=['int64', 'float64']).columns.tolist()
if 'Attrition' in numerical_columns:
    numerical_columns.remove('Attrition')

# Standardisasi fitur numerik
scaler = StandardScaler()
df_cleaned[numerical_columns] = scaler.fit_transform(df_cleaned[numerical_columns])

# One-hot encoding untuk fitur kategorikal
df_encoded = pd.get_dummies(df_cleaned, columns=categorical_columns, drop_first=True)

#Mengubah nilai True dan False menjadi 1 dan 0
df_encoded = df_encoded.astype(int)

# Memisahkan fitur dan target
X = df_encoded.drop('Attrition', axis=1)
y = df_encoded['Attrition']

# Membagi data menjadi set pelatihan dan pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""**Modeling**"""

model = RandomForestClassifier(random_state=42)

# Latih model
model.fit(X_train, y_train)

"""**Evaluation**"""

# Prediksi pada data uji
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:, 1]

# Evaluasi hasil
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nAUC-ROC Score:", roc_auc_score(y_test, y_proba))
print("\nAccuracy Score:", accuracy_score(y_test, y_pred))

# Menyimpan model yang dilatih
joblib.dump(model, 'attrition_model.pkl')